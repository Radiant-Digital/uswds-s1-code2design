"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const Sentry = __importStar(require("@sentry/node"));
const converters_1 = require("../converters");
const exit_1 = require("../helpers/exit");
const zod_1 = require("zod");
const fs_1 = require("fs");
exports.command = 'generate-tokens';
exports.desc = 'Generate design tokens for a framework';
const validateArgs = zod_1.z.object({
    framework: zod_1.z.enum(converters_1.frameworks),
    config: zod_1.z.string(),
    output: zod_1.z.string(),
}).parse;
const builder = (yargs) => yargs
    .options({
    framework: {
        choices: [...converters_1.frameworks],
        alias: 'f',
        describe: 'Framework to generate design tokens for ex: tailwind',
    },
    config: {
        type: 'string',
        alias: 'c',
        describe: 'Path to framework config file',
    },
    output: {
        type: 'string',
        alias: 'o',
        describe: 'Path to output file',
        default: './design-tokens.json',
    },
})
    .demandOption(['framework', 'config'])
    .example([['$0 generate-tokens -f tailwind -c ./tailwind.config.json']]);
exports.builder = builder;
const handler = async (_argv) => {
    try {
        const validatedArgs = validateArgs(_argv);
        const { framework, config, output } = validatedArgs;
        console.log(`Checking ${framework} config at ${config}`);
        const converter = (0, converters_1.getConverter)(framework);
        await converter.loadConfig(config);
        const designTokens = await converter.convertColorToDesignTokens();
        console.log('Creating design tokens file');
        (0, fs_1.writeFileSync)(output, JSON.stringify(designTokens, null, 2));
        console.log(`Design tokens created at path ${output}`);
        console.log(`You can now use your design tokens in your ${framework} config file like this:
${converter.sampleConfigFile()}
`);
    }
    catch (e) {
        Sentry.captureException(e);
        console.error(e);
        (0, exit_1.exitProcess)();
    }
};
exports.handler = handler;
