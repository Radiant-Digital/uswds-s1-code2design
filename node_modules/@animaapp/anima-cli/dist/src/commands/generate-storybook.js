"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const loader_1 = require("../helpers/loader");
const Sentry = __importStar(require("@sentry/node"));
const fs_1 = __importDefault(require("fs"));
const helpers_1 = require("../helpers");
const storybook_1 = require("../helpers/storybook");
const token_1 = require("../helpers/token");
const debug_1 = require("../helpers/debug");
const api_1 = require("../api");
exports.command = 'generate-storybook';
exports.desc = 'Initialise storybook on your project';
const builder = (yargs) => yargs
    .options({
    token: { type: 'string', alias: 't' },
    components: { type: 'string', alias: 'd' },
    component: { type: 'string', alias: 'c' },
    buildDir: { type: 'string', alias: 'b' },
    skipInstall: { type: 'boolean' },
    debug: { type: 'boolean' },
})
    .example([['$0 generate-storybook -d <components-dir>']]);
exports.builder = builder;
const handler = async (_argv) => {
    const transaction = Sentry.startTransaction({
        op: 'generate-storybook',
        name: 'initialise storybook',
    });
    if (_argv.components && _argv.component) {
        throw Error("Cannot pass both components (-d) and component (-c) arguments");
    }
    if (_argv.components && !fs_1.default.lstatSync(_argv.components).isDirectory()) {
        throw Error("Components (-d) must be a directory");
    }
    if (_argv.component && !fs_1.default.lstatSync(_argv.component).isFile()) {
        throw Error("Component (-c) must be a file");
    }
    try {
        Sentry.getCurrentHub().configureScope((scope) => scope.setSpan(transaction));
        (0, debug_1.setDebug)(!!_argv.debug);
        const token = (0, token_1.getToken)(_argv);
        await (0, api_1.authenticate)(token);
        // Install storybook
        if (!fs_1.default.existsSync(".storybook") && !_argv.skipInstall) {
            loader_1.loader.newStage('Install storybook');
            (0, storybook_1.initialiseStorybook)();
        }
        else {
            console.log('Skipping storybook install');
        }
        // Create stories
        loader_1.loader.newStage('Fetching components');
        let filesToGenerateStoryFor = [];
        if (_argv.component) {
            filesToGenerateStoryFor = [_argv.component];
        }
        else {
            const componentsDir = _argv.components || 'src';
            const files = (0, storybook_1.getJSFiles)(componentsDir);
            filesToGenerateStoryFor = files.filter(f => f.split(".").length === 2 && !(0, storybook_1.hasStorybook)(files, f));
        }
        loader_1.loader.newStage(`Creating ${filesToGenerateStoryFor.length} component stories`);
        const types = (0, storybook_1.getTypes)(_argv.buildDir || '');
        await (0, storybook_1.generateStories)(filesToGenerateStoryFor, types, token);
        console.log("");
        loader_1.loader.stop();
        helpers_1.log.green('  - Done');
        helpers_1.log.yellow("Now run 'npm run storybook' to check your storybook");
        transaction.status = 'ok';
        transaction.finish();
    }
    catch (e) {
        transaction.status = 'error';
        transaction.finish();
        throw e;
    }
};
exports.handler = handler;
