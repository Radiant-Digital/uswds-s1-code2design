"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticate = exports.AuthError = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const constants_1 = require("../constants");
const node_1 = require("@sentry/node");
class AuthError extends Error {
    constructor(message, token) {
        super('[AuthError]: ' + message);
        this.token = token;
    }
}
exports.AuthError = AuthError;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const authenticate = async (storybookToken) => {
    const transaction = (0, node_1.getCurrentHub)().getScope()?.getTransaction();
    const authSpan = transaction?.startChild({ op: 'authenticate' });
    const errorRes = { success: false, data: {} };
    try {
        if (!storybookToken)
            return errorRes;
        const res = await (0, node_fetch_1.default)(`${constants_1.STORYBOOK_SERVICE_BASE_URL}/validate_token`, {
            method: 'GET',
            headers: {
                Authorization: 'Bearer ' + storybookToken,
            },
        });
        if (res.status === 200) {
            const data = await res.json();
            return { success: true, data };
        }
        if (res.status > 299) {
            const json = await res.json();
            const message = json?.message || 'Missing Storybook token';
            throw new AuthError(message, storybookToken);
        }
        return errorRes;
    }
    catch (error) {
        console.log(error);
        throw new AuthError('Impossible to authenticate', storybookToken);
    }
    finally {
        authSpan?.finish();
    }
};
exports.authenticate = authenticate;
