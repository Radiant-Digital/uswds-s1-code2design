"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadStorybook = exports.uploadBuffer = void 0;
const form_data_1 = __importDefault(require("form-data"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const debug_1 = require("./debug");
const node_1 = require("@sentry/node");
const storybook_1 = require("../api/storybook");
const uploadBuffer = async (url, buff) => {
    const fromData = new form_data_1.default();
    fromData.append('name', 'storybook_preview');
    fromData.append('file', buff, { knownLength: buff.byteLength });
    return (0, node_fetch_1.default)(url, {
        method: 'PUT',
        headers: {
            'Content-Type': 'multipart/form-data',
        },
        body: fromData,
    });
};
exports.uploadBuffer = uploadBuffer;
const uploadStorybook = async ({ token, storybookId, uploadUrl, uploadStatus, zipBuffer, }) => {
    const transaction = (0, node_1.getCurrentHub)().getScope()?.getTransaction();
    const spanUploadStorybook = transaction?.startChild({
        op: 'upload-storybook-process',
    });
    (0, node_1.getCurrentHub)().configureScope((scope) => scope.setSpan(spanUploadStorybook));
    (0, debug_1.isDebug)() && console.log('storybookId =>', storybookId);
    let finalUploadStatus = uploadStatus;
    let skipUpload = true;
    if (uploadStatus !== 'complete' && uploadUrl && storybookId) {
        skipUpload = false;
        const uploadResponse = await (0, exports.uploadBuffer)(uploadUrl, zipBuffer);
        const upload_status = uploadResponse.status === 200 ? 'complete' : 'failed';
        await storybook_1.storybookApi.updateStorybook(token, storybookId, {
            upload_status,
            preload_stories: true,
        });
        finalUploadStatus = upload_status;
    }
    spanUploadStorybook?.finish();
    return {
        skipUpload,
        uploadStatus: finalUploadStatus,
    };
};
exports.uploadStorybook = uploadStorybook;
