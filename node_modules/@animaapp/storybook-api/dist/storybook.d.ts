import type { CreateStorybookParams, StorybookApiOptions, StorybookEntity, getOrCreateStorybookResponse } from './types';
export declare class StorybookApi {
    #private;
    constructor(opts: StorybookApiOptions);
    getStorybookByHash: (token: string, hash: string) => Promise<StorybookEntity | null>;
    updateDSTokenIfNeeded: ({ currentDSToken, storybook, token, }: {
        currentDSToken: Record<string, unknown>;
        storybook: {
            ds_tokens?: string;
            id: string;
            upload_status: string;
        };
        token: string;
    }) => Promise<void>;
    createStorybook: (token: string, params: CreateStorybookParams) => Promise<StorybookEntity | null>;
    getMostRecentStorybook: (token: string) => Promise<StorybookEntity | null>;
    updateStorybook: (token: string, id: string, fields: Partial<StorybookEntity>) => Promise<StorybookEntity>;
    getOrCreateStorybook: (token: string, hash: string, raw_ds_tokens: Record<string, unknown> | undefined, basePath: string | undefined) => Promise<getOrCreateStorybookResponse>;
    getOrCreateStorybookForDesignTokens: (token: string, raw_ds_tokens?: Record<string, unknown>) => Promise<getOrCreateStorybookResponse>;
    syncOnlyDesignTokens: (token: string, designTokens: Record<string, unknown>) => Promise<getOrCreateStorybookResponse>;
}
//# sourceMappingURL=storybook.d.ts.map