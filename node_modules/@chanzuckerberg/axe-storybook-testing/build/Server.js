"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWithServer = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const http_server_1 = __importDefault(require("http-server"));
const portfinder_1 = __importDefault(require("portfinder"));
/**
 * Create a server to serve up the storybook build. If using a running Storybook, then just use
 * that.
 *
 * Needed to work around https://github.com/chanzuckerberg/axe-storybook-testing/issues/51 and
 * https://github.com/storybookjs/storybook/issues/16967, so Storybook can load all the stories
 * when storyStoreV7 is used.
 *
 * In particular there's a stories.json file that Storybook fetches, and it can't do that if we're
 * accessing it via file:// url.
 */
function runWithServer(options, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const server = yield getServer(options);
        yield server.start();
        const returnValue = yield callback(server.storybookUrl);
        yield server.stop();
        return returnValue;
    });
}
exports.runWithServer = runWithServer;
function getServer(options) {
    return __awaiter(this, void 0, void 0, function* () {
        // If we have a storybook address, then storybook is already running and we just need to use that
        // address. No need to start or stop a server, either.
        if (options.storybookAddress) {
            return {
                storybookUrl: options.storybookAddress,
                start: () => Promise.resolve(),
                stop: () => Promise.resolve(),
            };
        }
        const localPath = getStaticStorybookPath(options);
        const port = yield portfinder_1.default.getPortPromise();
        const host = '127.0.0.1';
        const server = http_server_1.default.createServer({ root: localPath });
        const storybookUrl = `http://${host}:${port}`;
        function start() {
            return new Promise((resolve) => {
                server.listen(port, host, () => {
                    console.log('Serving up üçï static storybook build at:', storybookUrl);
                    resolve();
                });
            });
        }
        function stop() {
            server.close();
            return Promise.resolve();
        }
        return { storybookUrl, start, stop };
    });
}
function getStaticStorybookPath(options) {
    const storybookStaticPath = path_1.default.resolve(options.buildDir);
    const iframeFilePath = path_1.default.join(storybookStaticPath, 'iframe.html');
    if (!fs_1.default.existsSync(iframeFilePath)) {
        throw new Error(`Static Storybook not found at ${storybookStaticPath}. Have you called build-storybook first?`);
    }
    return storybookStaticPath;
}
