"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSuite = void 0;
const assert_1 = __importDefault(require("assert"));
const indent_string_1 = __importDefault(require("indent-string"));
const each_1 = __importDefault(require("lodash/each"));
const groupBy_1 = __importDefault(require("lodash/groupBy"));
const mocha_1 = __importDefault(require("mocha"));
const browser_1 = __importDefault(require("./browser"));
/**
 * Find Storybook stories and generate a test for each one.
 */
function runSuite(storybookUrl, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const suiteTitle = `[${options.browser}] accessibility`;
        const browser = yield browser_1.default.create(storybookUrl, options);
        const stories = yield browser.getStories();
        const storiesByComponent = (0, groupBy_1.default)(stories, 'componentTitle');
        const skippedErrors = [];
        const mocha = new mocha_1.default({
            reporter: options.reporter,
            reporterOptions: Object.assign({ suiteName: suiteTitle }, options.reporterOptions),
            timeout: options.timeout,
        });
        mocha.suite.title = suiteTitle;
        // Print info about any errors that were skipped but did not fail the test suite. This happens
        // when a story has `mode: 'skip'`.
        mocha.suite.afterAll(() => {
            if (skippedErrors.length > 0) {
                console.log(`${skippedErrors.length} violations were detected in stories with "mode" set to "warn", so did not fail the test suite:\n\n`, skippedErrors.join('\n\n'));
            }
        });
        // Make sure the test browser closes after everything has finished.
        mocha.suite.afterAll(() => __awaiter(this, void 0, void 0, function* () {
            yield browser.close();
        }));
        (0, each_1.default)(storiesByComponent, (stories, componentTitle) => {
            // Create another suite (AKA `describe`) to group this component's stories together.
            const componentSuite = mocha_1.default.Suite.create(mocha.suite, componentTitle);
            // Skip all stories for this component if its title doesn't match the `pattern` option.
            // Equivalent to writing `describe.skip(...)`.
            if (!options.pattern.test(componentTitle)) {
                componentSuite.pending = true;
            }
            stories.forEach((story) => {
                // Create a test for this story.
                const test = new mocha_1.default.Test(story.name, function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        if (story.timeout) {
                            // @ts-expect-error -- Mocha's TS definitions don't properly type `this`
                            this.timeout(story.timeout);
                        }
                        // Run Axe.
                        const result = yield browser.getResultForStory(story);
                        if (result.isPassing(options.failingImpacts)) {
                            assert_1.default.ok(true);
                            // Mark this test as pending if it cannot cause the suite to fail.
                            if (!story.shouldFailTestSuiteIfViolations) {
                                // @ts-expect-error -- Mocha's TS definitions don't properly type `this`
                                this.skip();
                            }
                        }
                        else {
                            // Fail with an error instead of a string, to prevent some unnecessary stuff being
                            // printed to the console.
                            const error = new Error(
                            // Indent each line of the failure message so it lines up with how Mocha prints
                            // the test names.
                            (0, indent_string_1.default)(result.toString(), 5).trimStart());
                            // Clear out the `stack` property. Otherwise the xunit reporter prints the error message
                            // twice. It seems that the stack trace includes the error message, for some reason.
                            error.stack = '';
                            // Fail the test if the story isn't skipped or configured to "warn". Show the error
                            // message either way .
                            if (story.shouldFailTestSuiteIfViolations) {
                                assert_1.default.fail(error);
                            }
                            else {
                                error.message = `${componentTitle} / ${story.name} / ${error.message}`;
                                skippedErrors.push(error);
                                // @ts-expect-error -- Mocha's TS definitions don't properly type `this`
                                this.skip();
                            }
                        }
                    });
                });
                // Skip this test if the story is disabled. Equivalent to writing `it.skip(...)`.
                if (story.shouldNotEvenRunTest) {
                    test.pending = true;
                }
                componentSuite.addTest(test);
            });
        });
        return new Promise((resolve) => {
            mocha.run(resolve);
        });
    });
}
exports.runSuite = runSuite;
