"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const playwright_1 = __importDefault(require("playwright")); // eslint-disable-line import/default
const ProcessedStory_1 = __importDefault(require("../ProcessedStory"));
const Result_1 = __importDefault(require("../Result"));
const AxePage = __importStar(require("./AxePage"));
const StorybookPage = __importStar(require("./StorybookPage"));
class TestBrowser {
    /**
     * Create a new test browser instance that knows how to use Storybook and Axe. Needed because
     * constructors can't be async.
     */
    static create(storybookUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const browser = yield playwright_1.default[options.browser].launch({
                headless: options.headless,
            });
            try {
                const context = yield browser.newContext({ bypassCSP: true });
                // Create a new page at Storybook's static iframe and with axe-core setup and ready to run.
                const page = yield context.newPage();
                // Print any console logs containing the word "error" coming from the browser, to help
                // debugging.
                page.on('console', (message) => {
                    if (/error/i.test(message.text())) {
                        console.log('console log from browser:', message);
                    }
                });
                // Turn on `prefers-reduced-motion`. This will prevent any animations that respect the media
                // query from causing flaky or failing tests due to animation.
                yield page.emulateMedia({ reducedMotion: 'reduce' });
                // Visit Storybook's static iframe.
                yield page.goto(storybookUrl + '/iframe.html');
                // Ensure axe-core is setup and ready to run.
                yield AxePage.prepare(page);
                return new TestBrowser(browser, page);
            }
            catch (message) {
                // Something has gone wrong after the browser was launched. Make sure we clean up the opened
                // browser.
                yield browser.close();
                // Reject this promise.
                throw message;
            }
        });
    }
    constructor(browser, page) {
        this.browser = browser;
        this.page = page;
    }
    /**
     * Get the Storybook stories from a prepared browser page.
     */
    getStories() {
        return __awaiter(this, void 0, void 0, function* () {
            const rawStories = yield StorybookPage.getStories(this.page);
            return rawStories.map((story) => new ProcessedStory_1.default(story));
        });
    }
    /**
     * Run Axe for a story.
     */
    getResultForStory(story) {
        return __awaiter(this, void 0, void 0, function* () {
            yield StorybookPage.showStory(this.page, story.id);
            if (story.waitForSelector) {
                yield this.page.waitForSelector(story.waitForSelector, {
                    state: 'attached',
                });
            }
            return Result_1.default.fromPage(this.page, story);
        });
    }
    /**
     * Close the browser and any open pages.
     */
    close() {
        return this.browser.close();
    }
}
exports.default = TestBrowser;
