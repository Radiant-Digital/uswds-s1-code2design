"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const indent_string_1 = __importDefault(require("indent-string"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const AxePage_1 = require("./browser/AxePage");
/**
 * These rules aren't useful/helpful in the context of Storybook stories, and we disable them when
 * running Axe.
 */
const defaultDisabledRules = [
    'bypass',
    'landmark-one-main',
    'page-has-heading-one',
    'region',
];
/**
 * Violations reported by Axe for a story.
 */
class Result {
    /**
     * Run Axe on a browser page that is displaying a story.
     */
    static fromPage(page, story) {
        return __awaiter(this, void 0, void 0, function* () {
            const disabledRules = [...defaultDisabledRules, ...story.disabledRules];
            const axeResults = yield (0, AxePage_1.analyze)(page, disabledRules, story.runOptions);
            return new Result(axeResults.violations);
        });
    }
    constructor(violations) {
        this.violations = violations;
    }
    /**
     * Determine if a result is passing or not. A result is passing if it has no violations.
     */
    isPassing(failingImpacts) {
        if (failingImpacts.includes('all')) {
            // Violation impact is optional, so to avoid a check below for undefined impacts,
            // just check for any violation.
            return this.violations.length === 0;
        }
        return this.violations.every((violation) => {
            return !failingImpacts.includes(String(violation.impact));
        });
    }
    toString() {
        return (0, ts_dedent_1.default) `
    Detected the following accessibility violations!

    ${this.violations.map(formatViolation).join('\n\n')}
  `;
    }
}
exports.default = Result;
function formatViolation(violation, index) {
    return (0, ts_dedent_1.default) `
    ${index + 1}. ${violation.id} (${violation.help})

       For more info, visit ${violation.helpUrl}.

       Check these nodes:

       ${violation.nodes.map(formatNode).join('\n\n')}
  `;
}
function formatNode(node) {
    if (node.failureSummary) {
        return (0, ts_dedent_1.default) `
      - html: ${node.html}
        summary: ${(0, indent_string_1.default)(node.failureSummary, 11).trimStart()}
    `;
    }
    return `- html: ${node.html}`;
}
