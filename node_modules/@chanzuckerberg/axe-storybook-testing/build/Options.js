"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseOptions = void 0;
const yargs_1 = __importDefault(require("yargs"));
const options = {
    browser: {
        alias: 'B',
        default: 'chromium',
        description: 'Which browser to run in',
        choices: ['chromium', 'webkit', 'firefox'],
    },
    'build-dir': {
        alias: 'b',
        default: 'storybook-static',
        description: 'Directory to load the static storybook built by build-storybook from',
        type: 'string',
    },
    'failing-impact': {
        alias: 'i',
        default: 'all',
        description: 'Lowest impact level to consider a failure',
        choices: ['minor', 'moderate', 'serious', 'critical', 'all'],
    },
    headless: {
        alias: 'h',
        default: true,
        description: 'Whether the browser should be ran "headfully" (non-headlessly)',
        type: 'boolean',
    },
    pattern: {
        alias: 'p',
        default: '.*',
        description: 'Filter by a component name regex pattern',
        type: 'string',
    },
    reporter: {
        alias: 'r',
        default: 'spec',
        description: 'How to display test results. Can be any built-in Mocha reporter - https://mochajs.org/#reporters',
        choices: [
            'spec',
            'dot',
            'nyan',
            'tap',
            'landing',
            'list',
            'progress',
            'json',
            'json-stream',
            'min',
            'doc',
            'markdown',
            'xunit',
        ],
    },
    'reporter-options': {
        alias: 'R',
        description: 'Options to pass to the Mocha reporter (especially the xunit reporter) - https://mochajs.org/#reporters',
        type: 'string',
    },
    'storybook-address': {
        alias: 's',
        description: 'Storybook server address to test against instead of using a static build directory. If set, build-dir will be ignored.',
        type: 'string',
    },
    timeout: {
        alias: 't',
        default: 2000,
        description: 'Timeout for each test (in milliseconds)',
        type: 'number',
    },
};
/**
 * Parse and normalize command line arguments passed to the script.
 */
function parseOptions() {
    const argv = yargs_1.default.options(options).parseSync();
    return {
        browser: argv.browser,
        buildDir: argv.buildDir,
        headless: argv.headless,
        failingImpacts: getFailingImpacts(argv['failing-impact']),
        pattern: new RegExp(argv.pattern),
        reporter: argv.reporter,
        reporterOptions: getReporterOptions(argv['reporter-options']),
        storybookAddress: argv.storybookAddress,
        timeout: argv.timeout,
    };
}
exports.parseOptions = parseOptions;
function getFailingImpacts(failingImpact) {
    switch (failingImpact) {
        case 'critical':
            return ['critical'];
        case 'serious':
            return ['critical', 'serious'];
        case 'moderate':
            return ['critical', 'serious', 'moderate'];
        case 'minor':
            return ['critical', 'serious', 'moderate', 'minor'];
        case 'all':
            return ['critical', 'serious', 'moderate', 'minor', 'all'];
    }
}
function getReporterOptions(reporterOptionsParams) {
    return Object.fromEntries(new URLSearchParams(reporterOptionsParams));
}
