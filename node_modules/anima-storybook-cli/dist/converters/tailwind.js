"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TailwindConverter = void 0;
const kebab_case_1 = __importDefault(require("kebab-case"));
const flat_1 = __importStar(require("flat"));
const helpers_1 = require("../helpers");
const utils_1 = require("./utils");
const framework_helpers_1 = require("@animaapp/framework-helpers");
class TailwindConverter {
    constructor() {
        this.framework = 'tailwind';
        this.config = null;
    }
    async loadConfig(configPath) {
        this.config = framework_helpers_1.schemaTailwind.parse(await (0, helpers_1.loadJSFileFromCWD)(configPath));
        return this.config;
    }
    async convertColorToDesignTokens() {
        if (!this.config)
            throw new Error('Config not loaded');
        const extendColors = this.config.theme.extend?.colors;
        const colors = this.config.theme.colors;
        if (!extendColors)
            helpers_1.log.yellow('No theme.extend.colors found in tailwind config but found theme.colors');
        const tailwindTokenColor = (0, flat_1.default)({ ...colors, ...extendColors }, {
            delimiter: TailwindConverter.delimiter,
            transformKey: kebab_case_1.default,
        });
        let designTokens = {};
        Object.keys(tailwindTokenColor).forEach((key) => {
            designTokens[key] = (0, utils_1.formatColorToTokenValue)(tailwindTokenColor[key]);
        });
        designTokens = (0, flat_1.unflatten)(designTokens, { delimiter: TailwindConverter.delimiter, object: true });
        return designTokens;
    }
    sampleConfigFile() {
        return `
const {
  getTailwindTheme,
} = require("anima-storybook-cli/dist/lib/tailwindTheme");
const dsToken = require("./design-tokens.json");

const theme = getTailwindTheme(dsToken);

module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    colors: theme.colors,
  },
};
`;
    }
}
TailwindConverter.delimiter = '.';
exports.TailwindConverter = TailwindConverter;
