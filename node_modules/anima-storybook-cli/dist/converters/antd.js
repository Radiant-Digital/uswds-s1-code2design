"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AntdConverter = void 0;
const framework_helpers_1 = require("@animaapp/framework-helpers");
const helpers_1 = require("../helpers");
const utils_1 = require("./utils");
class AntdConverter {
    constructor() {
        this.framework = 'antd';
        this.config = null;
    }
    async loadConfig(configPath) {
        this.config = framework_helpers_1.schemaAntd.parse(await (0, helpers_1.loadJSFileFromCWD)(configPath));
        return this.config;
    }
    async convertColorToDesignTokens() {
        if (!this.config)
            throw new Error('Config not loaded');
        const tokens = this.config.token;
        const colors = {};
        Object.entries(tokens).forEach(([key, value]) => {
            if (key.includes('color')) {
                colors[key] = value;
            }
        });
        const designTokens = {};
        Object.entries(colors).forEach(([key, value]) => {
            designTokens[key] = (0, utils_1.formatColorToTokenValue)(value);
        });
        return { [framework_helpers_1.ANTD_TOKEN_KEY]: designTokens };
    }
    sampleConfigFile() {
        return `
import {
  getAntdTheme,
} from "anima-storybook-cli/dist/lib/antdTheme";
import dsToken from "./design-tokens.json";

import { Button, ConfigProvider } from 'antd';
import React from 'react';

const theme = getAntdTheme(dsToken);

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        ...theme.token,
      },
    }}
  >
    <Button />
  </ConfigProvider>
);

export default App;
`;
    }
}
exports.AntdConverter = AntdConverter;
