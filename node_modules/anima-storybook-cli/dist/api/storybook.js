"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateStorybook = exports.getTeamProcessingStories = exports.getOrCreateStorybookForDesignTokens = exports.getOrCreateStorybook = exports.updateDSTokenIfNeeded = exports.createStorybook = exports.getStorybookByHash = void 0;
const node_1 = require("@sentry/node");
const node_fetch_1 = __importDefault(require("node-fetch"));
const constants_1 = require("../constants");
const helpers_1 = require("./../helpers");
const getStorybookByHash = async (token, hash) => {
    const traceHeader = (0, node_1.getCurrentHub)().getScope()?.getSpan()?.toTraceparent();
    const headers = {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + token,
    };
    if (traceHeader) {
        headers['sentry-trace'] = traceHeader;
    }
    return (0, node_fetch_1.default)(`${constants_1.STORYBOOK_SERVICE_BASE_URL}/storybook?hash=${hash}`, {
        method: 'GET',
        headers,
    });
};
exports.getStorybookByHash = getStorybookByHash;
const createStorybook = async (token, params) => {
    const traceHeader = (0, node_1.getCurrentHub)().getScope()?.getSpan()?.toTraceparent();
    const headers = {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + token,
    };
    if (traceHeader) {
        headers['sentry-trace'] = traceHeader;
    }
    const res = await (0, node_fetch_1.default)(`${constants_1.STORYBOOK_SERVICE_BASE_URL}/storybook`, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(params),
    });
    if (res.status === 200) {
        const data = await res.json();
        return data;
    }
    return null;
};
exports.createStorybook = createStorybook;
const updateDSTokenIfNeeded = async ({ currentDSToken, storybook, token, }) => {
    const { ds_tokens, id, upload_status } = storybook;
    const uploadSpan = (0, node_1.getCurrentHub)().getScope()?.getSpan();
    const span = uploadSpan?.startChild({ op: 'update-ds-token-if-needed' });
    const ds_tokensAsString = JSON.stringify(currentDSToken);
    if (ds_tokens !== ds_tokensAsString) {
        const spanUpdateStorybook = span?.startChild({ op: 'update-storybook' });
        const response = await (0, exports.updateStorybook)(token, id, {
            ds_tokens: ds_tokensAsString,
            upload_status,
        });
        if (response.status !== 200) {
            if (spanUpdateStorybook) {
                spanUpdateStorybook.status = 'error';
                spanUpdateStorybook.finish();
            }
            throw new Error('Network request failed, response status !== 200');
        }
        else {
            spanUpdateStorybook?.finish();
        }
    }
};
exports.updateDSTokenIfNeeded = updateDSTokenIfNeeded;
const getOrCreateStorybook = async (token, hash, raw_ds_tokens = {}, basePath) => {
    const transaction = (0, node_1.getCurrentHub)().getScope()?.getTransaction();
    const spanGetOrCreate = transaction?.startChild({
        op: 'get-or-create-storybook',
    });
    const res = await (0, exports.getStorybookByHash)(token, hash);
    let data = null;
    if (res.status === 200) {
        data = await res.json();
    }
    else if (res.status === 404) {
        const spanCreateStorybook = spanGetOrCreate?.startChild({
            op: 'create-storybook',
        });
        data = await (0, exports.createStorybook)(token, {
            storybook_hash: hash,
            ds_tokens: JSON.stringify(raw_ds_tokens),
            base_path: basePath,
        });
        spanCreateStorybook?.finish();
    }
    const { id, upload_signed_url, upload_status = 'init', ds_tokens: dsTokens, } = data ?? {};
    transaction?.setData('storybookID', id);
    spanGetOrCreate?.finish();
    return {
        storybookId: id,
        uploadUrl: upload_signed_url,
        uploadStatus: upload_status,
        hash,
        designTokens: dsTokens,
    };
};
exports.getOrCreateStorybook = getOrCreateStorybook;
const getOrCreateStorybookForDesignTokens = async (token, raw_ds_tokens = {}) => {
    const transaction = (0, node_1.getCurrentHub)().getScope()?.getTransaction();
    const spanGetOrCreate = transaction?.startChild({
        op: 'get-or-create-storybook-for-design-tokens',
    });
    const res = await getMostRecentStorybook(token);
    let data = null;
    const hash = (0, helpers_1.hashString)(token);
    if (res.status !== 200) {
        throw new Error('We had an issue making a request to our server. Please try again, or reach out to the Anima team if the problem persists');
    }
    const { results } = await res.json();
    if (results.length) {
        data = results[0];
    }
    else {
        const spanCreateStorybook = spanGetOrCreate?.startChild({
            op: 'create-storybook',
        });
        data = await (0, exports.createStorybook)(token, {
            ds_tokens: JSON.stringify(raw_ds_tokens),
            storybook_hash: hash,
            status: 'ready',
            upload_status: 'complete',
        });
        spanCreateStorybook?.finish();
    }
    const { id, upload_signed_url, upload_status = 'complete', ds_tokens: dsTokens, } = data ?? {};
    transaction?.setData('storybookID', id);
    spanGetOrCreate?.finish();
    return {
        storybookId: id,
        uploadUrl: upload_signed_url,
        uploadStatus: upload_status,
        hash,
        designTokens: dsTokens,
    };
};
exports.getOrCreateStorybookForDesignTokens = getOrCreateStorybookForDesignTokens;
const getTeamProcessingStories = async (token) => {
    const traceHeader = (0, node_1.getCurrentHub)().getScope()?.getSpan()?.toTraceparent();
    const headers = {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + token,
    };
    if (traceHeader) {
        headers['sentry-trace'] = traceHeader;
    }
    return (0, node_fetch_1.default)(`${constants_1.STORYBOOK_SERVICE_BASE_URL}/stories_processing`, {
        method: 'GET',
        headers,
    });
};
exports.getTeamProcessingStories = getTeamProcessingStories;
const getMostRecentStorybook = async (token) => {
    const query = new URLSearchParams({
        order_by: '-updated_at',
        limit: '1',
    }).toString();
    const traceHeader = (0, node_1.getCurrentHub)().getScope()?.getSpan()?.toTraceparent();
    const headers = {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + token,
    };
    if (traceHeader) {
        headers['sentry-trace'] = traceHeader;
    }
    return (0, node_fetch_1.default)(`${constants_1.STORYBOOK_SERVICE_BASE_URL}/storybooks?${query}`, {
        method: 'GET',
        headers,
    });
};
const updateStorybook = async (token, id, fields) => {
    const traceHeader = (0, node_1.getCurrentHub)().getScope()?.getSpan()?.toTraceparent();
    const headers = {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + token,
    };
    if (traceHeader) {
        headers['sentry-trace'] = traceHeader;
    }
    return (0, node_fetch_1.default)(`${constants_1.STORYBOOK_SERVICE_BASE_URL}/storybook/${id}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(fields),
    });
};
exports.updateStorybook = updateStorybook;
