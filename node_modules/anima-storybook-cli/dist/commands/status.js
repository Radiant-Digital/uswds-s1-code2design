"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const ora_1 = __importDefault(require("ora"));
const api_1 = require("../api");
const Sentry = __importStar(require("@sentry/node"));
const helpers_1 = require("../helpers");
const exit_1 = require("../helpers/exit");
exports.command = 'status';
exports.desc = 'Status of components';
const builder = (yargs) => yargs
    .options({
    token: { type: 'string', alias: 't' },
    debug: { type: 'boolean' },
})
    .example([['$0 status -t <storybook-token>']]);
exports.builder = builder;
const handler = async (_argv) => {
    const __DEBUG__ = !!_argv.debug;
    const stage = 'Checking local environment';
    const loader = (0, ora_1.default)(`${stage}...\n`).start();
    await (0, helpers_1.loadAnimaConfig)();
    // check if token is provided as an arg or in .env
    const token = (_argv.token ??
        process.env.STORYBOOK_ANIMA_TOKEN ??
        '');
    if (__DEBUG__) {
        helpers_1.log.yellow(`token => ${token} \n`);
    }
    if (!token) {
        loader.stop();
        helpers_1.log.yellow(`Storybook token not found. Please provide a token using the --token flag or the STORYBOOK_ANIMA_TOKEN environment variable.`);
        await (0, exit_1.exitProcess)();
    }
    // validate token with the api
    try {
        const response = await (0, api_1.authenticate)(token);
        loader.stop();
        if (!response.success) {
            helpers_1.log.red(`The Storybook token you provided "${token}" is invalid. Please check your token and try again.`);
            Sentry.captureException(new Error("The Storybook token you provided 'HIDDEN' is invalid. Please check your token and try again."));
            await (0, exit_1.exitProcess)();
        }
    }
    catch (error) {
        helpers_1.log.red(`Something went wrong. We've been notified and will look into it as soon as possible`);
        Sentry.captureException(error);
        await (0, exit_1.exitProcess)();
    }
    helpers_1.log.green(`  - ${stage} ...OK`);
    const res = await (0, api_1.getTeamProcessingStories)(token);
    if (res.status !== 200) {
        throw new Error(`Impossible to retrieve story, status !== 200, current: ${res.status}`);
    }
    loader.stop();
    helpers_1.log.green(`  - ${stage} ...OK`);
    const { results: stories } = await res.json();
    helpers_1.log.yellow(`  - Processing stories: ${stories.length} remaining`);
    loader.stop();
    helpers_1.log.green('  - Done');
};
exports.handler = handler;
