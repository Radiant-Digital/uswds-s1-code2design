"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const config_1 = require("./../helpers/config");
const ora_1 = __importDefault(require("ora"));
const exit_1 = require("../helpers/exit");
const api_1 = require("../api");
const helpers_1 = require("../helpers");
const Sentry = __importStar(require("@sentry/node"));
const file_system_1 = require("../helpers/file-system");
exports.command = 'sync-design-tokens';
exports.desc = 'Sync your design tokens to Figma';
const builder = (yargs) => yargs
    .options({
    token: { type: 'string', alias: 't' },
    designTokens: { type: 'string' },
    debug: { type: 'boolean' },
})
    .example([
    [
        '$0 sync-design-tokens --design-tokens <path-to-tokens-file> -t <storybook-token>',
    ],
]);
exports.builder = builder;
const handler = async (_argv) => {
    const transaction = Sentry.startTransaction({
        op: 'start-sync-design-tokens',
        name: 'start sync design tokens process',
    });
    Sentry.getCurrentHub().configureScope((scope) => scope.setSpan(transaction));
    const __DEBUG__ = !!_argv.debug;
    const animaConfig = await (0, config_1.loadAnimaConfig)();
    let stage = 'Checking local environment';
    let loader = (0, ora_1.default)(`${stage}...\n`).start();
    const designTokensPath = _argv.designTokens;
    loader.stop();
    if (!designTokensPath) {
        helpers_1.log.yellow(`Please provide a path to your design tokens using the --design-tokens flag.`);
        await (0, exit_1.exitProcess)();
    }
    const spanGetDSToken = transaction.startChild({ op: 'get-ds-token' });
    stage = 'Syncing files';
    loader = (0, ora_1.default)(`${stage}...`).start();
    let designTokens = animaConfig.design_tokens ?? {};
    try {
        designTokens =
            (await (0, file_system_1.getFileOrThrow)(designTokensPath)) ?? {};
    }
    catch (error) {
        const errorMessage = `Fail to read design tokens at path "${designTokensPath}"`;
        loader.stop();
        helpers_1.log.yellow(errorMessage);
        Sentry.captureException(new Error("Fail to read design tokens at path 'HIDDEN'"));
        spanGetDSToken.status = 'error';
        spanGetDSToken.finish();
        transaction.finish();
        await (0, exit_1.exitProcess)();
    }
    spanGetDSToken.finish();
    const token = (_argv.token ??
        process.env.STORYBOOK_ANIMA_TOKEN ??
        '');
    if (__DEBUG__) {
        console.log('token =>', token);
    }
    if (!token) {
        loader.stop();
        helpers_1.log.yellow(`Storybook token not found. Please provide a token using the --token flag or the STORYBOOK_ANIMA_TOKEN environment variable.`);
        await (0, exit_1.exitProcess)();
    }
    const authSpan = transaction.startChild({ op: 'authenticate' });
    const response = await (0, api_1.authenticate)(token);
    loader.stop();
    if (!response.success) {
        helpers_1.log.red(`The Storybook token you provided "${token}" is invalid. Please check your token and try again.`);
        Sentry.captureException(new Error("The Storybook token you provided 'HIDDEN' is invalid. Please check your token and try again."));
        authSpan.status = 'error';
        authSpan.finish();
        transaction.finish();
        await (0, exit_1.exitProcess)();
    }
    Sentry.configureScope((scope) => {
        scope.setUser({
            id: response.data.team_slug,
            team_id: response.data.team_id,
        });
        scope.setTag('teamId', response.data.team_id);
    });
    authSpan.finish();
    helpers_1.log.green(`  - ${stage} ...OK`);
    const storybook = await (0, api_1.getOrCreateStorybookForDesignTokens)(token, designTokens);
    const spanUpload = transaction.startChild({
        op: 'update-design-tokens',
    });
    Sentry.getCurrentHub().configureScope((scope) => scope.setSpan(spanUpload));
    const currentDesignTokens = storybook.designTokens;
    if (storybook.storybookId) {
        await (0, api_1.updateDSTokenIfNeeded)({
            storybook: {
                id: storybook.storybookId,
                upload_status: storybook.uploadStatus,
                ds_tokens: currentDesignTokens,
            },
            token,
            currentDSToken: designTokens,
        }).catch((e) => {
            Sentry.captureException(e);
            helpers_1.log.yellow(`Fail to update designTokens, ${e.message}`);
        });
    }
    spanUpload.finish();
    loader.stop();
};
exports.handler = handler;
