"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadJSFileFromCWD = exports.loadPackageJSON = exports.loadAnimaConfig = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const c12_1 = require("c12");
const pkg_types_1 = require("pkg-types");
const loadAnimaConfig = async () => {
    // load anima.config.(js|ts) file
    const loadOptions = { dotenv: true, rcFile: false };
    const [{ config: tsConfig }, { config: jsConfig }] = await Promise.all([
        (0, c12_1.loadConfig)({
            configFile: 'anima.config.js',
            ...loadOptions,
        }),
        (0, c12_1.loadConfig)({
            configFile: 'anima.config.ts',
            ...loadOptions,
        }),
    ]);
    // load .animarc file
    const rcFile = (0, path_1.resolve)('.animarc');
    let rcConfig = {};
    if ((0, fs_extra_1.existsSync)(rcFile)) {
        try {
            rcConfig = JSON.parse((0, fs_extra_1.readFileSync)(rcFile, 'utf-8'));
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
    }
    // load anima.config.json file
    const jsonFile = (0, path_1.resolve)('anima.config.json');
    let jsonConfig = {};
    if ((0, fs_extra_1.existsSync)(jsonFile)) {
        try {
            jsonConfig = JSON.parse((0, fs_extra_1.readFileSync)(jsonFile, 'utf-8'));
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
    }
    return {
        ...rcConfig,
        ...jsonConfig,
        ...(jsConfig ?? {}),
        ...(tsConfig ?? {}),
    };
};
exports.loadAnimaConfig = loadAnimaConfig;
const loadPackageJSON = async () => {
    try {
        const pkg = await (0, pkg_types_1.readPackageJSON)(await (0, pkg_types_1.resolvePackageJSON)());
        return pkg;
    }
    catch (error) {
        return null;
    }
};
exports.loadPackageJSON = loadPackageJSON;
const loadJSFileFromCWD = async (filePath) => {
    return await Promise.resolve(`${process.cwd() + '/' + filePath}`).then(s => __importStar(require(s)));
};
exports.loadJSFileFromCWD = loadJSFileFromCWD;
